#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
PROGRAM=$(basename "$0")
IMG_NAME="IMG_NAME"
APP_NAME="APP_NAME"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-hurricane}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.config/${APP_NAME}"}
APP_GUEST_CFG=${APP_GUEST_CFG:-"/config"}
APP_PORT=${APP_PORT:-6789}
EDGE=${EDGE:-0}
UMASK=${UMASK:-002}
RUN_MODE="-d"

( id -Gn | grep -q docker ) || [[ $EUID == 0 ]] || SUDO=sudo

if [[ "${APP_USER}" != "appuser" ]]; then
  APP_UID=$(getent passwd "$APP_USER" | awk -F":" '{print $3}')
  APP_GID=$(getent passwd "$APP_USER" | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [[ ${APP_USER} == "nobody" ]]; then
  APP_USER="appuser"
fi

show_help() {
  # shellcheck disable=SC2086
  cat <<_EOF_
Usage: ${PROGRAM} [OPTION]
Launch ${APP_NAME} containerized

      --console     Launch bash console. If running, option will drop user into
                    bash session within running container. Otherwise, option
                    will interupt normal startup and start bash session
                    instead of any services.
  -l, --logs        Print container log
  -f, --service     Launch ${APP_NAME} docker container in foreground
  -s, --status      Print running processes within container
  -x, --stop        Stop continaer
  -u, --update      Update ${APP_NAME} within docker container,
                    container must be running
  -h, --help        Display this help and exit

Report bugs to https://github.com/hurricanehrndz/docker-containers
_EOF_
  exit
}

cleanup_stopped_instances() {
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect --format="{{.Config.Image}}" "${c}")
    if [[ ${image} =~ ${APP_REPO}/${IMG_NAME} ]]; then
      running=$(${SUDO} docker inspect --format="{{.State.Running}}" "${c}")
      if [[ ${running} != true ]]; then
        ${SUDO} docker rm -v "${c}" > /dev/null 2>&1
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  ENV_VARS+=" --env=EDGE=${EDGE}"
  if [[ -f /etc/timezone ]]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  elif [[ ! -z "${TIMEZONE}" ]]; then
    ENV_VARS+=" --env=TZ=${TIMEZONE}"
  else
    ENV_VARS+=" --env=TZ=$(date "+%Z")"
  fi
}

prepare_docker_volume_parameters() {
  volume_maps=(
    "${APP_CONFIG}","${APP_GUEST_CFG}"
  )

  for volume_map in "${volume_maps[@]}"; do
    IFS=',' read -r system_path container_path <<< "${volume_map}"
    if [[ ! -d "$system_path" ]]; then
      mkdir -p "$system_path"
    fi
    CURR_SID=$(stat -c"%u:%g" "$system_path")
    if [ "$CURR_SID" != "$APP_UID:$APP_GID" ] ; then
      chown -R "$APP_UID":"$APP_GID" "$system_path"
    fi
    VOLUMES+=" --volume=${system_path}:${container_path}"
  done
}

prepare_user_volume_parameters() {
  # Ensure app config directory exist.
  if [[ ! -d "${APP_CONFIG}" ]]; then
    echo "Error, ${APP_NAME} data directory: ${APP_CONFIG} does not exist."
    exit 1
  fi

  if [[ ! -e "${APP_CONFIG}/.${APP_NAME}.volumes" ]]; then
    declare -a user_volumes
    echo "No existing user volumes for: ${APP_NAME}."
    echo "Pleae enter full paths you want accessible from within the container"
    echo "Enter one entry per line."
    echo "Enter \"done\" or "Ctrl+D" when finished"
    while read -r hostpath; do
      if [[ "$hostpath" == "done" ]]; then
        break
      fi
      if [[ ! -d "$hostpath" ]]; then
        echo "Sorry, $hostpath is not a valid path."
      else
        user_volumes+=("$hostpath")
      fi
    done < /dev/stdin

    touch "${APP_CONFIG}/.${APP_NAME}.volumes"
    for user_volume in "${user_volumes[@]}"; do
      echo "${user_volume}" >> "${APP_CONFIG}/.${APP_NAME}.volumes"
    done
  fi

  # setup user volumes
  while read -r user_volume; do
    if [[ "$user_volume" =~ : ]]; then
      host_path=$(echo "$user_volume"| awk -F: '{print $1}')
      container_path=$(echo "$user_volume"| awk -F: '{print $2}')
      VOLUMES+=" --volume=${host_path}:${container_path}"
    else
      VOLUMES+=" --volume=${user_volume}:${user_volume}"
    fi
  done < "${APP_CONFIG}/.${APP_NAME}.volumes"
}

prepare_docker_xsocket() {
  if [[ -n "${XAUTHORITY}" ]]; then
    if [[ ! -e "${XAUTH}" ]]; then
      touch "${XAUTH}"
      xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f "${XAUTH}" nmerge -
    fi

    VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
    VOLUMES+=" --volume=${XAUTH}:${XAUTH}"
    ENV_VARS+=" --env=DISPLAY"
    ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"
  fi
}

stop_container() {
  docker stop $APP_NAME > /dev/null 2>&1
}

show_logs() {
  docker logs $APP_NAME
}

start_gui_in_running_container() {
  docker exec -d $APP_NAME $APP_NAME
}

start_console_in_running_container() {
  docker exec -it $APP_NAME bash
}

start_update() {
  docker exec -it $APP_NAME update
}

show_processes() {
  docker top $APP_NAME
}


###############################################################################
#                               Start Container                               #
###############################################################################
prep_start() {
  cleanup_stopped_instances
  prepare_docker_env_parameters
  prepare_docker_volume_parameters
  prepare_user_volume_parameters
}

run_container() {
  prep_start
  # shellcheck disable=SC2086
  ${SUDO} docker run \
    --name=${APP_NAME} \
    -p "${APP_PORT}:${APP_PORT}" \
    --log-opt max-size=2m \
    --log-opt max-file=2 \
    ${RUN_MODE} \
    ${ENV_VARS} \
    ${VOLUMES} \
    ${OTHER_DOCKER_OPTS} \
    "${APP_REPO}/${IMG_NAME}"
}

start_container() {
  if [[ -n "$SHOW_LOGS"  || -n "$SHOW_PROCESSES"  || -n "$UPDATE_PROG" ]]; then
    echo "Container not running."
    exit 1
  fi

  if [[ -n "$RUN_IN_FOREGROUND" ]]; then
    RUN_MODE=""
  fi

  if [[ -n "$RUN_CONSOLE" ]]; then
    RUN_MODE="-it"
    OTHER_DOCKER_OPTS="--entrypoint bash"
  fi

  if [[ -n "$RUN_GUI" ]]; then
    if [[ -z "$XAUTHORITY" ]]; then
      echo "Display Server not detected."
      exit 1
    fi
    RUN_MODE="-d"
    OTHER_DOCKER_OPTS="--entrypoint ${APP_NAME}"
  fi
  run_container
}


###############################################################################
#                          Execute within Container                           #
###############################################################################
run_command_in_running_container() {
  if [[ -n "$RUN_IN_FOREGROUND" ]]; then
    cat <<_EOF_
Container already running.
Please stop and restart container.
_EOF_
    exit 1
  fi

  if [[ -n "$STOP_CONTAINER" ]]; then
    stop_container
    cleanup_stopped_instances
    exit
  fi

  if [[ -n "$SHOW_LOGS" ]]; then
    show_logs
    exit
  fi

  if [[ -n "$RUN_GUI" ]]; then
    if [[ -z "$XAUTHORITY" ]]; then
      echo "Display Server not detected."
      exit 1
    fi
    start_gui_in_running_container
    exit
  fi

  if [[ -n "$RUN_CONSOLE" ]]; then
    start_console_in_running_container
    exit
  fi

  if [[ -n "$UPDATE_PROG" ]]; then
    start_update
    exit
  fi

  if [[ -n "$SHOW_PROCESSES" ]]; then
    show_processes
    exit
  fi
  echo "Container already running."
}


###############################################################################
#                                Main Program                                 #
###############################################################################
while getopts "flsquh-:" opt; do
  case $opt in
    f)
      RUN_IN_FOREGROUND=true
      ;;
    l)
      SHOW_LOGS=true
      ;;
    s)
      SHOW_PROCESSES=true
      ;;
    q)
      STOP_CONTAINER=true
      ;;
    u)
      UPDATE_PROG=true
      ;;
    h)
      show_help >&2
      exit
      ;;
    - )
      case $OPTARG in
        console)
          RUN_CONSOLE=true
          ;;
        logs)
          SHOW_LOGS=true
          ;;
        service)
          RUN_IN_FOREGROUND=true
          ;;
        status)
          SHOW_PROCESSES=true
          ;;
        stop)
          STOP_CONTAINER=true
          ;;
        update)
          UPDATE_PROG=true
          ;;
        help)
          show_help >&2
          exit
          ;;
        *)
          echo "Invalid option: --$OPTARG" >&2
          exit 2
          ;;
      esac
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 2
      ;;
  esac
done

shift $((OPTIND-1))
if [[ $# -ge 1 ]]; then
  show_help
  exit 1
fi

running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${APP_NAME} 2> /dev/null)
if [[ "${running}" != "true" ]]; then
  start_container
else
  run_command_in_running_container
fi
